import sys
import os

from preprocessing import PreProcessing
from segmentation import Segmentation
from detection import Detection

## Specify the path to the raw data  
rawDataPath = "./data"

## Names of image and DEM 
IMG = "rad_4551910_2016-01-02_RE4_3A_Analytic.tif"
DEM = "srtm_arniko.tif"

## Specify the path to hold data for RF model 
## such as, "training.shp", "ndvi.tif", "slope.tif", etc.
## where training.shp is provided by user, other files are generated by SALaD
rfPath = "./test"

## Name of training data
RFtrain = "training.shp"

## Path and file name of final result
outPath = rfPath
outfile = "landslide_dissolve.shp"

##
## END OF USER-DEFINED VARIABLES
##

def main():
    if not os.path.exists(rawDataPath):
        raise RuntimeError('A path to raw data must be specified')
        
    if not os.path.exists(rfPath):
        raise RuntimeError('A path for random forest inputs must be specified')
    
    if not os.path.isfile(os.path.join(rawDataPath, IMG)):
        raise RuntimeError('An image must be specified')
            
    if not os.path.isfile(os.path.join(rawDataPath, DEM)):
        raise RuntimeError('A DEM must be specified')
    
    if not os.path.isfile(os.path.join(rfPath, RFtrain)):
        raise RuntimeError('A training for RF model must be specified')
    
    #file id derived from raw data 
    tag = IMG.split('.')[0]
    fid = tag[4:]
    
    # step1  generate 5 geotiff
    step1 = PreProcessing(pathToFile=rawDataPath, imageFile=IMG, demFile=DEM, outPath=rfPath)
    step1.run()
    print("Preprocessing Completed")
    homogfile = "homog_"+fid+".tif"
    meanfile = "mean_"+fid+".tif"
    slopefile = "slope_"+fid+".tif"
    brightfile = "bright_"+fid+".tif"
    ndvifile = "ndvi_"+fid+".tif" 
    
    #segmentation generate a shape file
    step2 = Segmentation(pathToFile=rawDataPath, imageFile=IMG, outPath=rfPath)
    step2.run()
    print("Segmentation Completed")
    segfile = "seg_"+fid+".shp"  

    # random forest model to detect landslides
    step3 = Detection(pathToFile=rfPath, training=RFtrain,
                      segFile = segfile, brightFile=brightfile, ndviFile=ndvifile,                       
                      slopeFile=slopefile, homogFile=homogfile, meanFile=meanfile, 
                      outPath=outPath, outFile=outfile)
    step3.run()
    print("SALaD Completed")
if __name__ == "__main__":
    sys.exit(main())
    
